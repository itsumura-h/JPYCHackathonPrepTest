/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  JPYCQuizRewardNFTSrouce,
  JPYCQuizRewardNFTSrouceInterface,
} from "../JPYCQuizRewardNFTSrouce";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
    ],
    name: "getTokenURIJson",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060dc8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063e820e91b14602d575b600080fd5b60436004803603810190603f9190607e565b6045565b005b50565b600080fd5b6000819050919050565b605e81604d565b8114606857600080fd5b50565b6000813590506078816057565b92915050565b60006020828403121560915760906048565b5b6000609d84828501606b565b9150509291505056fea2646970667358221220132e56db854dedbf73e08713027cdeada83b6f42828327277ec75910006a260064736f6c634300080c0033";

export class JPYCQuizRewardNFTSrouce__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<JPYCQuizRewardNFTSrouce> {
    return super.deploy(overrides || {}) as Promise<JPYCQuizRewardNFTSrouce>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): JPYCQuizRewardNFTSrouce {
    return super.attach(address) as JPYCQuizRewardNFTSrouce;
  }
  connect(signer: Signer): JPYCQuizRewardNFTSrouce__factory {
    return super.connect(signer) as JPYCQuizRewardNFTSrouce__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): JPYCQuizRewardNFTSrouceInterface {
    return new utils.Interface(_abi) as JPYCQuizRewardNFTSrouceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): JPYCQuizRewardNFTSrouce {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as JPYCQuizRewardNFTSrouce;
  }
}
